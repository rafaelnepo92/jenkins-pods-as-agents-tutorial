import groovy.transform.Field

// We need this because of the mono repo :(
@Field String PROJECT_DIR = 'rusty-report-printer'

pipeline {
    agent {
        kubernetes {
            inheritFrom 'Node18Alpine kaniko'
            yamlMergeStrategy merge()
            defaultContainer 'rust'
            yaml '''
            spec:
              containers:
                - name: rust
                  image: rust:1.61-alpine3.15
                  command: ["sleep", "infinity"]
                  resources:
                    requests:
                      cpu: 200m
                      memory: 256Mi
                    limits:
                      cpu: 2
                      memory: 256Mi
            '''
        }
    }

    options {
        buildDiscarder logRotator(numToKeepStr: '10')
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
    }

    stages {
        stage('Generate Report') {
            steps {
                dir(PROJECT_DIR) {
                    container('node18') {
                    sh './report_generator.js'
                    }
                }
            }
        }

        stage('Install dependencies') {
            steps {
                dir(PROJECT_DIR) {
                    container('rust') {
                    //if we are on alpine, we need to install musl-dev
                    sh 'apk add --no-cache musl-dev=1.2.2-r7'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'cargo build --locked'
                }
            }
        }

        // Oh no, we can't perform regular Docker Builds on Kubernetes

        stage('Build Image') {
            environment {
                DOCKER_BUILDKIT = "1"
            }
            steps {
                dir(PROJECT_DIR) {
                    container('kaniko') {
                        script {
                          kaniko.buildNoPush imageName: 'rusty-report-printer',
                                             imageTag: getImageTags(),
                                             context: PROJECT_DIR,
                                             dockerfile: "${PROJECT_DIR}/Dockerfile"
                        }
                    }
                }
            }
        }
    }
}

def getImageTags() {
    def tags = [sanitizeImageTag("${env.GIT_BRANCH}-${env.GIT_COMMIT}")]
    if (isMaster()) {
        tags += 'latest'
    }
    return tags
}
